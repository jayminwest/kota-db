name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published, edited]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Extract changelog for version
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        # Extract the changelog section for this version
        CHANGELOG=$(awk -v ver="$VERSION" '
          /^## \[/ { if (found) exit; }
          $0 ~ "^## \\[" ver "\\]" { found=1; next; }
          found && /^## \[/ { exit; }
          found { print; }
        ' CHANGELOG.md)
        
        # If no specific version found, use unreleased section
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG=$(awk '
            /^## \[Unreleased\]/ { found=1; next; }
            found && /^## \[/ { exit; }
            found { print; }
          ' CHANGELOG.md)
        fi
        
        # Save to file for GitHub release body
        echo "$CHANGELOG" > release_notes.md
        echo "Release notes extracted successfully"
    
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        PRERELEASE=""
        if echo "$VERSION" | grep -qE "(alpha|beta|rc)"; then
          PRERELEASE="--prerelease"
        fi
        
        gh release create "v${VERSION}" \
          --title "KotaDB v${VERSION}" \
          --notes-file release_notes.md \
          $PRERELEASE
        
        # Get the upload URL for artifacts
        UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/tags/v${VERSION} --jq '.upload_url' | sed 's/{.*}//')
        echo "upload_url=${UPLOAD_URL}" >> $GITHUB_OUTPUT

  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: kotadb-linux-x64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: kotadb-linux-musl-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: kotadb-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: kotadb-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: kotadb-windows-x64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl-tools (Linux musl)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools pkg-config libssl-dev
        # Set up environment for musl compilation
        echo "CC=musl-gcc" >> $GITHUB_ENV
        echo "AR=ar" >> $GITHUB_ENV
        echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV
        # Use vendored OpenSSL to avoid linking issues
        echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV
    
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }} --bin kotadb
    
    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czvf ${{ matrix.name }}-v${{ needs.create-release.outputs.version }}.tar.gz kotadb
        echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.name }}-v${{ needs.create-release.outputs.version }}.tar.gz" >> $GITHUB_ENV
        echo "ASSET_NAME=${{ matrix.name }}-v${{ needs.create-release.outputs.version }}.tar.gz" >> $GITHUB_ENV
    
    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.name }}-v${{ needs.create-release.outputs.version }}.zip kotadb.exe
        echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.name }}-v${{ needs.create-release.outputs.version }}.zip" >> $env:GITHUB_ENV
        echo "ASSET_NAME=${{ matrix.name }}-v${{ needs.create-release.outputs.version }}.zip" >> $env:GITHUB_ENV
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  publish-python:
    name: Publish Python Package to PyPI
    needs: create-release
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Update version
      working-directory: ./clients/python
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        echo "Publishing Python package version: $VERSION"
        sed -i "s/version=\"[^\"]*\"/version=\"$VERSION\"/" setup.py
        sed -i "s/^version = \"[^\"]*\"/version = \"$VERSION\"/" pyproject.toml
        
    - name: Build package
      working-directory: ./clients/python
      run: python -m build
      
    - name: Publish to PyPI
      working-directory: ./clients/python
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  publish-typescript:
    name: Publish TypeScript Package to npm
    needs: create-release
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Update version
      working-directory: ./clients/typescript
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        echo "Publishing TypeScript package version: $VERSION"
        npm version $VERSION --no-git-tag-version
        
    - name: Install dependencies
      working-directory: ./clients/typescript
      run: npm ci
      
    - name: Build package
      working-directory: ./clients/typescript
      run: npm run build
      
    - name: Publish to npm
      working-directory: ./clients/typescript
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish

  docker-release:
    name: Release Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-docs:
    name: Deploy Versioned Documentation
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install mkdocs-material
        pip install mkdocs-minify-plugin
        pip install mike
        pip install mkdocs-git-revision-date-localized-plugin
    
    - name: Configure Git for Mike
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Ensure gh-pages branch exists
      run: |
        # Check if gh-pages exists on remote
        if ! git ls-remote --heads origin gh-pages | grep -q gh-pages; then
          echo "Creating gh-pages branch"
          git checkout --orphan gh-pages
          git reset --hard
          git commit --allow-empty -m "Initialize gh-pages branch"
          git push origin gh-pages
          git checkout main
        fi
        
        # Fetch the gh-pages branch
        git fetch origin gh-pages:gh-pages --force
    
    - name: Deploy versioned documentation
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        
        # Set up Mike to use the gh-pages branch
        export GIT_COMMITTER_NAME="github-actions[bot]"
        export GIT_COMMITTER_EMAIL="github-actions[bot]@users.noreply.github.com"
        
        # Check if this is the first deployment
        if ! git show-ref --verify --quiet refs/heads/gh-pages || [ -z "$(git ls-tree -r gh-pages --name-only 2>/dev/null)" ]; then
          echo "First deployment detected"
          # For first deployment, don't use --update-aliases
          mike deploy --push --branch gh-pages "$VERSION" latest
        else
          # Deploy the version with latest alias
          mike deploy --push --update-aliases --branch gh-pages "$VERSION" latest
        fi
        
        # If this is a stable release (not pre-release), also tag as stable
        if [[ ! "$VERSION" =~ (alpha|beta|rc) ]]; then
          mike retitle --push --branch gh-pages "$VERSION" "$VERSION (stable)"
          mike alias --push --branch gh-pages "$VERSION" stable
        fi
        
        # Set latest as default
        mike set-default --push --branch gh-pages latest
    
    - name: Summary
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        echo "✅ Documentation deployed for version $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "View at: https://jayminwest.github.io/kota-db/$VERSION/" >> $GITHUB_STEP_SUMMARY
