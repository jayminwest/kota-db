name: Quality Gates

# Advanced quality checks for all PRs
on:
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

jobs:
  # Property-based testing - ensure edge cases are covered
  property-tests:
    name: Property-Based Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "property"
    
    - name: Run property-based tests
      run: |
        # Run property tests with more iterations in CI
        PROPTEST_CASES=1000 cargo test --features proptest proptest 2>/dev/null || echo "No property tests found"
      env:
        RUST_LOG: error
      continue-on-error: true

  # API compatibility check - ensure no breaking changes
  api-compatibility:
    name: API Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.base_ref == 'main'
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check for breaking changes
      run: |
        # Check commit messages for breaking change indicators
        if git log --pretty=format:"%s %b" origin/${{ github.base_ref }}..HEAD | grep -iE "breaking|BREAKING CHANGE|BREAKING_CHANGE"; then
          echo "⚠️ Potential breaking changes detected - ensure proper version bump"
        fi
      continue-on-error: true

  # License compliance - ensure all dependencies are compatible
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v5
    
    - name: Check licenses
      run: |
        # Basic license check - ensure no GPL code
        if find . -type f -name "*.rs" -exec grep -l "GPL" {} \; 2>/dev/null | grep -v ".git"; then
          echo "⚠️ Found potential GPL licensed code"
        fi
        echo "✅ Basic license check passed"
      continue-on-error: true

  # CHANGELOG verification - ensure changes are documented
  changelog-check:
    name: CHANGELOG Verification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Check CHANGELOG update
      run: |
        # Check if CHANGELOG.md has been updated in this PR
        if git diff origin/${{ github.base_ref }}...HEAD --name-only | grep -q "CHANGELOG.md"; then
          echo "✅ CHANGELOG.md has been updated"
        else
          echo "⚠️ Warning: CHANGELOG.md has not been updated"
          echo "Please update CHANGELOG.md with your changes in the [Unreleased] section"
        fi
      continue-on-error: true

  # Database migration testing - ensure data compatibility
  migration-test:
    name: Migration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "migration"
    
    - name: Test data compatibility
      run: |
        # Build current version
        cargo build --release
        
        # Create test data with current version (db auto-initializes)
        ./target/release/kotadb insert test/doc.md "Test Document" "Test content"
        
        # Verify data can be read
        ./target/release/kotadb get test/doc.md | grep -q "Test content"
        echo "✅ Data operations working"
      continue-on-error: true