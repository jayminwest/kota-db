name: Production Gate

# This workflow runs additional checks for production releases
on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0

jobs:
  # Comprehensive test suite with all features
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Run all tests with all features
      run: |
        echo "Running complete test suite..."
        cargo test --all-features --workspace -- --include-ignored
    
    - name: Run tests in release mode
      run: |
        echo "Running tests in release mode..."
        cargo test --release --all-features --workspace
    
    - name: Run single-threaded tests
      run: |
        echo "Running single-threaded tests to catch race conditions..."
        cargo test --all-features --workspace -- --test-threads=1
      continue-on-error: true

  # Memory safety checks
  memory-safety:
    name: Memory Safety
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install valgrind
      run: sudo apt-get update && sudo apt-get install -y valgrind
    
    - name: Build debug binary
      run: cargo build --all-features
    
    - name: Run with valgrind
      run: |
        # Run basic operations under valgrind
        valgrind --leak-check=full --show-leak-kinds=all --error-exitcode=1 \
        # Database auto-initializes, no init command needed
        valgrind --leak-check=full --show-leak-kinds=all --error-exitcode=1 \
          ./target/debug/kotadb stats || true
      continue-on-error: true

  # Thread safety verification
  thread-safety:
    name: Thread Safety
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-careful
      run: cargo install cargo-careful --locked
      continue-on-error: true
    
    - name: Run with cargo-careful
      run: |
        cargo careful test --all-features || true
      continue-on-error: true
    
    - name: Run concurrent stress tests
      run: |
        cargo test --release --features bench concurrent_stress -- --nocapture

  # Data integrity verification
  data-integrity:
    name: Data Integrity
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release binary
      run: cargo build --release --all-features
    
    - name: Test data persistence
      run: |
        # Database auto-initializes on first use
        # Insert test data
        for i in {1..100}; do
          echo "Document $i" | ./target/release/kotadb insert "/test/doc$i.md" --stdin
        done
        
        # Verify all documents
        for i in {1..100}; do
          ./target/release/kotadb get "/test/doc$i.md" | grep -q "Document $i" || exit 1
        done
        
        echo "‚úÖ Data integrity verified"

  # Performance baseline
  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build optimized binary
      run: cargo build --release --all-features
      env:
        CARGO_PROFILE_RELEASE_LTO: true
        CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
    
    - name: Run performance tests
      run: |
        cargo test --release --features bench performance_regression_test
    
    - name: Run benchmarks
      run: |
        cargo bench --features bench --no-fail-fast
    
    - name: Check performance metrics
      run: |
        # Run the binary and check basic performance with real operations
        for i in {1..10}; do
          echo "Perf test $i" | ./target/release/kotadb insert "/perf/doc$i.md" --stdin
        done
        ./target/release/kotadb stats

  # Backwards compatibility
  backwards-compatibility:
    name: Backwards Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Get previous version
      run: |
        # Get the last tagged version
        LAST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        echo "Last version: $LAST_VERSION"
        echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV
    
    - name: Test compatibility
      run: |
        # Build current version
        cargo build --release
        
        # Create test database with current version (auto-initializes)
        echo "Test" | ./target/release/kotadb insert /test.md --stdin
        
        # Try to checkout and test with previous version
        if git checkout ${{ env.LAST_VERSION }} 2>/dev/null; then
          cargo build --release
          ./target/release/kotadb --db new-db get /test.md || echo "May need migration"
        fi
      continue-on-error: true

  # Documentation completeness
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check documentation
      run: |
        # Build docs and check for warnings
        cargo doc --all-features --no-deps
      env:
        RUSTDOCFLAGS: "-D warnings"
    
    - name: Check for missing docs
      run: |
        # Add missing_docs lint check
        echo '#![warn(missing_docs)]' > src/lib_temp.rs
        cat src/lib.rs >> src/lib_temp.rs
        mv src/lib_temp.rs src/lib.rs
        cargo doc --all-features --no-deps 2>&1 | grep -i "warning" || true
        git checkout src/lib.rs

  # Production readiness gate
  production-gate:
    name: Production Readiness
    runs-on: ubuntu-latest
    needs: [
      full-test-suite,
      memory-safety,
      thread-safety,
      data-integrity,
      performance-baseline,
      backwards-compatibility,
      documentation-check
    ]
    if: always()
    steps:
    - name: Check production readiness
      run: |
        echo "Production Readiness Check"
        echo "=========================="
        
        READY=true
        
        if [[ "${{ needs.full-test-suite.result }}" != "success" ]]; then
          echo "‚ùå Full test suite: FAILED"
          READY=false
        else
          echo "‚úÖ Full test suite: PASSED"
        fi
        
        if [[ "${{ needs.thread-safety.result }}" != "success" ]]; then
          echo "‚ùå Thread safety: FAILED"
          READY=false
        else
          echo "‚úÖ Thread safety: PASSED"
        fi
        
        if [[ "${{ needs.data-integrity.result }}" != "success" ]]; then
          echo "‚ùå Data integrity: FAILED"
          READY=false
        else
          echo "‚úÖ Data integrity: PASSED"
        fi
        
        if [[ "${{ needs.performance-baseline.result }}" != "success" ]]; then
          echo "‚ùå Performance baseline: FAILED"
          READY=false
        else
          echo "‚úÖ Performance baseline: PASSED"
        fi
        
        if [[ "${{ needs.documentation-check.result }}" != "success" ]]; then
          echo "‚ö†Ô∏è  Documentation: NEEDS ATTENTION"
        else
          echo "‚úÖ Documentation: COMPLETE"
        fi
        
        echo ""
        if [ "$READY" = true ]; then
          echo "üöÄ Code is PRODUCTION READY"
        else
          echo "üõë Code is NOT ready for production"
          exit 1
        fi