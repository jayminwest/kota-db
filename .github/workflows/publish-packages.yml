name: Publish Client Libraries

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.2.0)'
        required: true
        type: string
      publish_python:
        description: 'Publish Python package to PyPI'
        required: true
        type: boolean
        default: true
      publish_typescript:
        description: 'Publish TypeScript package to npm'
        required: true
        type: boolean
        default: true

jobs:
  publish-python:
    name: Publish Python Package to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_python == 'true')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Update version in setup.py
        working-directory: ./clients/python
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "Publishing version: $VERSION"
          sed -i "s/version=\"[^\"]*\"/version=\"$VERSION\"/" setup.py
          
      - name: Build Python package
        working-directory: ./clients/python
        run: |
          python -m build
          
      - name: Check package
        working-directory: ./clients/python
        run: |
          twine check dist/*
          
      - name: Publish to PyPI
        working-directory: ./clients/python
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
          
  publish-typescript:
    name: Publish TypeScript Package to npm
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_typescript == 'true')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Update version in package.json
        working-directory: ./clients/typescript
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "Publishing version: $VERSION"
          npm version $VERSION --no-git-tag-version
          
      - name: Install dependencies
        working-directory: ./clients/typescript
        run: |
          npm ci
          
      - name: Build TypeScript package
        working-directory: ./clients/typescript
        run: |
          npm run build
          
      - name: Run tests
        working-directory: ./clients/typescript
        run: |
          npm test
          
      - name: Publish to npm
        working-directory: ./clients/typescript
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public
          
  update-documentation:
    name: Update Documentation with Package Links
    runs-on: ubuntu-latest
    needs: [publish-python, publish-typescript]
    if: always() && (needs.publish-python.result == 'success' || needs.publish-typescript.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update README with package badges
        run: |
          # This step would update README.md with the latest version badges
          # For now, we'll just create an issue to track this
          echo "Documentation update needed for published packages"
          
      - name: Create issue for documentation update
        uses: actions/github-script@v7
        with:
          script: |
            const version = context.eventName === 'release' 
              ? context.payload.release.tag_name.replace('v', '')
              : context.payload.inputs.version;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Bot] Update documentation for v${version} package releases`,
              body: `The client libraries have been published to package repositories:
              
              - ✅ Python: [kotadb-client on PyPI](https://pypi.org/project/kotadb-client/)
              - ✅ TypeScript: [kotadb-client on npm](https://www.npmjs.com/package/kotadb-client)
              
              Please update the documentation to reflect these published packages:
              
              - [ ] Add installation instructions using pip/npm
              - [ ] Add version badges to README
              - [ ] Update client library documentation
              - [ ] Add quickstart examples using the published packages
              
              Version published: **v${version}**`,
              labels: ['documentation', 'automation']
            });