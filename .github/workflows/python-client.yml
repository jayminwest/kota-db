name: Python Client CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'clients/python/**'
      - '.github/workflows/python-client.yml'
  pull_request:
    branches: [main]
    paths:
      - 'clients/python/**'
      - '.github/workflows/python-client.yml'

defaults:
  run:
    working-directory: clients/python

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Check formatting with black
        run: black --check kotadb tests
      
      - name: Check import sorting with isort
        run: isort --check-only kotadb tests
      
      - name: Lint with ruff
        run: ruff check kotadb tests
      
      - name: Type check with mypy
        if: matrix.python-version != '3.8'
        run: mypy kotadb --strict
      
      - name: Security check with bandit
        run: bandit -r kotadb -ll

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build KotaDB server
        working-directory: .
        run: cargo build --release --bin kotadb
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Run unit tests
        run: pytest tests/test_client.py tests/test_property.py -v --cov=kotadb --cov-report=xml --cov-fail-under=70
      
      - name: Start KotaDB server
        working-directory: .
        run: |
          ./target/release/kotadb serve --port 8080 > /tmp/kotadb.log 2>&1 &
          echo $! > /tmp/kotadb.pid
          sleep 2
      
      - name: Run integration tests
        run: pytest tests/test_integration.py -v -m integration
        continue-on-error: true
      
      - name: Stop KotaDB server
        if: always()
        run: |
          if [ -f /tmp/kotadb.pid ]; then
            kill $(cat /tmp/kotadb.pid) || true
          fi
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python-client
          name: Python ${{ matrix.python-version }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build KotaDB server
        working-directory: .
        run: cargo build --release --bin kotadb
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install pytest-benchmark
      
      - name: Start KotaDB server
        working-directory: .
        run: |
          ./target/release/kotadb serve --port 8080 > /tmp/kotadb.log 2>&1 &
          echo $! > /tmp/kotadb.pid
          sleep 2
      
      - name: Run benchmarks
        run: pytest tests/test_benchmark.py -v --benchmark-only --benchmark-json=benchmark.json
      
      - name: Stop KotaDB server
        if: always()
        run: |
          if [ -f /tmp/kotadb.pid ]; then
            kill $(cat /tmp/kotadb.pid) || true
          fi
      
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: clients/python/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: clients/python/dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/python-v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
      
      - name: Install twine
        run: pip install twine
      
      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: twine upload --repository testpypi dist/*
        continue-on-error: true
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*