name: CI

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Optimize for CI performance
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # Increase parallelism
  RUST_TEST_THREADS: 4
  CARGO_BUILD_JOBS: 4

jobs:
  # Quick format check - stays on GitHub (very fast)
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Clippy check - stays on GitHub (lightweight)
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "clippy-cache"
    
    - name: Install cargo-nextest
      run: cargo install cargo-nextest --locked
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Security audit - stays on GitHub (lightweight)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-v2
    
    - name: Install cargo-audit
      run: |
        if [ ! -f ~/.cargo/bin/cargo-audit ]; then
          cargo install cargo-audit --locked
        fi
    
    - name: Security audit
      run: cargo audit
      continue-on-error: true  # Don't fail on advisories

  # Main build and test - runs on GitHub (reliable and fast)
  build-and-test:
    name: Build & Test (GitHub Ubuntu)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "build-test"
    
    - name: Install cargo-nextest
      run: cargo install cargo-nextest --locked
    
    - name: Build project
      run: |
        cargo build --all-features
        cargo build --release --bin kotadb
    
    - name: Run unit tests (FAST - using cargo-nextest)
      run: |
        cargo nextest run --lib --all-features
        cargo test --doc --all-features
      env:
        RUST_LOG: error
        CI: true

  # Integration tests - strategic grouping for speed
  integration-tests:
    name: Integration Tests (GitHub)
    runs-on: ubuntu-latest
    needs: [format, clippy, build-and-test]
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        suite:
          - core
          - index-query
          - system-api
          - performance
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "integration-${{ matrix.suite }}"
    
    - name: Install cargo-nextest
      run: cargo install cargo-nextest --locked
    
    - name: Build release binary for integration tests
      run: cargo build --release --bin kotadb
    
    - name: Run ${{ matrix.suite }} tests
      shell: bash
      run: |
        SUITE="${{ matrix.suite }}"
        echo "Running test suite: $SUITE"
        
        if [ "$SUITE" = "core" ]; then
          echo "Running core storage and data tests..."
          cargo nextest run --test file_storage_integration_test
          cargo nextest run --test data_integrity_test
          cargo nextest run --test graph_storage_test
        elif [ "$SUITE" = "index-query" ]; then
          echo "Running indexing and search tests..."
          cargo nextest run --test primary_index_tests
          cargo nextest run --test trigram_content_search_test
          cargo nextest run --test query_routing_stress
        elif [ "$SUITE" = "system-api" ]; then
          echo "Running system and API tests..."
          cargo nextest run --test http_server_integration_test
          cargo nextest run --test cli_defaults_validation_test
          cargo nextest run --test code_analysis_integration_test
        elif [ "$SUITE" = "performance" ]; then
          echo "Running performance and stress tests..."
          cargo nextest run --test performance_regression_test
          cargo nextest run --test concurrent_stress_test
          cargo nextest run --test chaos_tests
        else
          echo "Unknown test suite: $SUITE"
          exit 1
        fi
      env:
        RUST_LOG: error
        CI: true

  # End-to-End Tests - Validates complete user journeys (Phase 2 Testing Pyramid)
  e2e-tests:
    name: E2E Tests (Production-like)
    runs-on: ubuntu-latest
    needs: [build-and-test]
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "e2e-tests"
    
    - name: Install cargo-nextest
      run: cargo install cargo-nextest --locked
    
    - name: Build KotaDB binary for E2E tests
      run: cargo build --release --bin kotadb
    
    - name: Run End-to-End Tests (Production Environment Simulation)
      run: |
        echo "🎯 Running E2E tests in production-like Ubuntu environment (matching Fly.io)"
        cargo nextest run --test e2e_integration_test
      env:
        RUST_LOG: error
        CI: true

  # Performance validation integrated into integration tests

  # Container build - stays on GitHub (needs Docker)
  container:
    name: Container Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container (Alpine-compatible without ONNX)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: kotadb:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build - stays on GitHub
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "docs"
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  # MCP Package Tests - runs on GitHub for consistency
  mcp-integration:
    name: MCP Package Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'kotadb-mcp-package/package-lock.json'
    
    - name: Check if MCP package exists
      id: check_mcp
      run: |
        if [ -d "kotadb-mcp-package" ] && [ -f "kotadb-mcp-package/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Install MCP package dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: |
        npm pkg delete scripts.postinstall 2>/dev/null || true
        npm ci
    
    - name: Build MCP package
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run build
    
    - name: Run MCP tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: |
        npm run test:unit
        npm run test:integration
      env:
        KOTADB_BINARY_PATH: ../target/release/kotadb

  # Code coverage - optional, runs on GitHub to avoid slowing down Mac
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "coverage"
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: |
        cargo llvm-cov clean --workspace
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && success()
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  # Final CI status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests, e2e-tests, security]
    if: always()
    timeout-minutes: 1
    steps:
    - name: Check CI results
      run: |
        echo "🔍 Evaluating CI pipeline results (GitHub-only, production-ready)..."
        
        # Check critical gates
        if [[ "${{ needs.build-and-test.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.e2e-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.security.result }}" == "failure" ]]; then
          echo "❌ CI failed"
          exit 1
        fi
        
        echo "✅ All CI checks passed!"
        echo "📊 Pipeline Performance Summary:"
        echo "  - Build & Test: ${{ needs.build-and-test.result }}"
        echo "  - Integration Tests: ${{ needs.integration-tests.result }}"
        echo "  - E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "  - Security: ${{ needs.security.result }}"
        echo "🌐 Environment: Ubuntu (matching Fly.io production)"