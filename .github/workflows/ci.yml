name: CI

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Quick format check - fails fast
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Clippy check - required by branch protection
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and Test - required by branch protection
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run tests
      run: cargo test --all-features -- --test-threads=2
      env:
        RUST_LOG: error
    
    - name: Run doc tests
      run: cargo test --doc --all-features

  # Additional test coverage for beta/nightly
  test-matrix:
    name: Test Suite (${{ matrix.rust }})
    runs-on: ubuntu-latest
    needs: [format, clippy]  # Run after quick checks pass
    strategy:
      matrix:
        rust:
          - beta
          - nightly
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        key: ${{ matrix.rust }}
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run tests
      run: cargo test --all-features -- --test-threads=2
      env:
        RUST_LOG: error

  # Security audit - can run in parallel
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}
    
    - name: Install cargo-audit
      run: |
        if [ ! -f ~/.cargo/bin/cargo-audit ]; then
          cargo install cargo-audit
        fi
    
    - name: Security audit
      run: cargo audit

  # Integration tests - can run in parallel
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [format]  # Only need format to pass first
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Run integration tests
      run: cargo test --test '*' --features bench

  # Performance tests - can run in parallel
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [format]  # Only need format to pass first
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Run performance regression tests
      run: cargo test --release --features bench performance_regression_test
      env:
        CI: true

  # Container build - can run in parallel
  container:
    name: Container Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: kotadb:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build - can run in parallel
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  # MCP Package Integration Tests - test MCP functionality
  mcp-integration:
    name: MCP Package Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]  # Need KotaDB binary to exist
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Build KotaDB binary
      run: cargo build --release
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: kotadb-mcp-package/package-lock.json
    
    - name: Install MCP package dependencies
      working-directory: kotadb-mcp-package
      run: npm ci
    
    - name: Build MCP package
      working-directory: kotadb-mcp-package
      run: npm run build
    
    - name: Run MCP unit tests
      working-directory: kotadb-mcp-package
      run: npm run test:unit
    
    - name: Run MCP integration tests
      working-directory: kotadb-mcp-package
      run: npm run test:integration
      env:
        KOTADB_BINARY_PATH: ../target/release/kotadb
    
    - name: Generate MCP coverage report
      working-directory: kotadb-mcp-package
      run: npm run test:coverage
      continue-on-error: true

  # Code coverage - only after main tests pass
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
