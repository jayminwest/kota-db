name: CI

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Optimize for CI performance
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # Increase parallelism - removed artificial limitation
  RUST_TEST_THREADS: 4
  CARGO_BUILD_JOBS: 4

jobs:
  # Quick format check - fails fast
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Clippy check - runs in parallel with format
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and prepare test binaries - other jobs depend on this
  build-and-test-prep:
    name: Build & Test Preparation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Build all targets
      run: |
        cargo build --all-features --all-targets
        cargo build --release --bin kotadb
    
    - name: Build test binaries
      run: cargo test --all-features --no-run
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/debug/
          target/release/kotadb
        retention-days: 1
  
  # Unit tests - depends on build
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target/
    
    - name: Run unit tests
      run: |
        cargo test --lib --all-features
        cargo test --doc --all-features
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Security audit - can run in parallel
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-v2
    
    - name: Install cargo-audit
      run: |
        if [ ! -f ~/.cargo/bin/cargo-audit ]; then
          cargo install cargo-audit --locked
        fi
    
    - name: Security audit
      run: cargo audit
      continue-on-error: true  # Don't fail on advisories

  # Storage and basic integration tests
  integration-core:
    name: Integration Tests (Core)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run core integration tests
      run: |
        cargo test --test file_storage_integration_test --test storage_index_integration_test --test data_integrity_test
        cargo test --test builder_tests --test document_builder_id_test --test validated_types_tests --test unicode_handling_test
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Index tests (primary and btree)
  integration-index:
    name: Integration Tests (Index)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run index tests
      run: |
        cargo test --test primary_index_tests --test primary_index_edge_cases_test --test primary_index_persistence_test
        cargo test --test btree_algorithms_test --test btree_performance_test --test test_btree_deletion
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Query and search tests  
  integration-query:
    name: Integration Tests (Query & Search)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run query and search tests
      run: |
        cargo test --test query_routing_stress --test bulk_operations_test --test llm_search_test --test wildcard_search_test
        cargo test --test trigram_content_search_test --test test_trigram_false_positives_221 --test test_trigram_result_differentiation_198
        cargo test --test test_search_consistency_issue_222 --test test_natural_language_query --test test_query_sanitization
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Concurrent and stress tests - Part 1
  integration-stress-1:
    name: Integration Tests (Stress Part 1)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run stress tests part 1
      run: |
        cargo test --test concurrent_access_test --test concurrent_stress_test --test concurrent_stress_simple_test
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Stress tests - Part 2
  integration-stress-2:
    name: Integration Tests (Stress Part 2)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run stress tests part 2
      run: |
        cargo test --test index_stress_test --test query_routing_stress
        cargo test --test chaos_tests --test adversarial_tests
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Performance tests
  integration-performance:
    name: Integration Tests (Performance)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run performance tests
      run: |
        cargo test --test performance_regression_test --test complexity_comparison_test --test write_performance_test
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # System and production tests
  integration-system:
    name: Integration Tests (System)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target/
    
    - name: Run system tests
      run: |
        cargo test --test cli_path_operations
        cargo test --test http_server_integration_test --test observability_integration_test
        cargo test --test production_configuration_test --test system_resilience_test --test security_path_traversal_test
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Code analysis and relationship tests
  integration-analysis:
    name: Integration Tests (Analysis)
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Run analysis tests
      run: |
        cargo test --test code_analysis_integration_test --test relationship_query_pipeline_test
        cargo test --test test_symbol_index --test test_symbol_debug
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 4

  # Integration tests summary - required by branch protection
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [integration-core, integration-index, integration-query, integration-stress-1, integration-stress-2, integration-performance, integration-system, integration-analysis]
    if: always()
    timeout-minutes: 1
    steps:
    - name: Check integration test results
      run: |
        if [[ "${{ needs.integration-core.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-index.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-query.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-stress-1.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-stress-2.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-performance.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-system.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-analysis.result }}" == "failure" ]]; then
          echo "One or more integration test suites failed"
          exit 1
        fi
        echo "All integration test suites passed successfully!"

  # Performance smoke test
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target/
    
    - name: Test release binary
      run: |
        # Make sure binary is executable
        chmod +x ./target/release/kotadb
        # Quick performance smoke test
        ./target/release/kotadb --version
        ./target/release/kotadb insert test/doc.md "Test Document" "Test content"
        ./target/release/kotadb get test/doc.md
        ./target/release/kotadb list
        ./target/release/kotadb stats
        echo "✅ Basic operations working"
      env:
        CI: true

  # Container build - can run in parallel
  container:
    name: Container Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container (Alpine-compatible without ONNX)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: kotadb:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build - can run in parallel
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "docs"
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  # MCP Package Integration Tests
  mcp-integration:
    name: MCP Package Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test-prep
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target/
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check if MCP package exists
      id: check_mcp
      run: |
        if [ -d "kotadb-mcp-package" ] && [ -f "kotadb-mcp-package/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Cache npm dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      uses: actions/cache@v4
      with:
        path: kotadb-mcp-package/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('kotadb-mcp-package/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install MCP package dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: |
        # Remove postinstall script temporarily for CI
        npm pkg delete scripts.postinstall 2>/dev/null || true
        npm ci
    
    - name: Build MCP package
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run build
    
    - name: Run MCP unit tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:unit
    
    - name: Run MCP integration tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:integration
      env:
        KOTADB_BINARY_PATH: ../target/release/kotadb
    
    - name: Generate MCP coverage report
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:coverage
      continue-on-error: true

  # Code coverage - runs in parallel, not dependent on other tests
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "coverage"
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: |
        # Clean any previous coverage data
        cargo llvm-cov clean --workspace
        # Generate coverage with explicit settings
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && success()
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true