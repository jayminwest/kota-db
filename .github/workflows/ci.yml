name: CI

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Optimize for CI performance
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CARGO_BUILD_JOBS: 2

jobs:
  # Quick format check - fails fast
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Clippy check - required by branch protection
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "clippy"
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Build only - compile once for other jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "build"
    
    - name: Build
      run: cargo build --release --all-features
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: target/release/kotadb
        retention-days: 1
  
  # Unit tests - fast lib tests only
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "build"
    
    - name: Run unit tests
      run: cargo test --lib --release --all-features -- --test-threads=4
      env:
        RUST_LOG: error
    
    - name: Run doc tests
      run: cargo test --doc --release --all-features

  # Additional test coverage for beta/nightly
  test-matrix:
    name: Test Suite (${{ matrix.rust }})
    runs-on: ubuntu-latest
    # Remove dependency to run in parallel
    strategy:
      matrix:
        rust:
          - beta
          - nightly
    continue-on-error: true
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        key: ${{ matrix.rust }}
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run tests
      run: cargo test --all-features -- --test-threads=2
      env:
        RUST_LOG: error

  # Security audit - can run in parallel
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-v2
    
    - name: Install cargo-audit
      run: |
        if [ ! -f ~/.cargo/bin/cargo-audit ]; then
          cargo install cargo-audit --locked
        fi
    
    - name: Security audit
      run: cargo audit
      continue-on-error: true  # Don't fail on advisories

  # Integration tests - can run in parallel
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "build"
    
    - name: Run integration tests
      run: cargo test --test '*' --release --features bench -- --test-threads=4
      env:
        RUST_LOG: error

  # Performance tests - quick smoke test only for PRs
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "build"
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target/release/
    
    - name: Make binary executable
      run: chmod +x target/release/kotadb
    
    - name: Run quick performance test
      run: |
        # Quick performance smoke test - just verify the binary works
        ./target/release/kotadb --version
        echo "Test content" | ./target/release/kotadb insert /test/doc.md --stdin
        ./target/release/kotadb get /test/doc.md
        ./target/release/kotadb list
        ./target/release/kotadb stats
        echo "âœ… Basic operations working"
      env:
        CI: true

  # Container build - can run in parallel
  container:
    name: Container Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: kotadb:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build - can run in parallel
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "docs"
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  # MCP Package Integration Tests - test MCP functionality
  mcp-integration:
    name: MCP Package Integration Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "mcp"
    
    - name: Build KotaDB binary
      run: cargo build --release
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check if MCP package exists
      id: check_mcp
      run: |
        if [ -d "kotadb-mcp-package" ] && [ -f "kotadb-mcp-package/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Cache npm dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      uses: actions/cache@v4
      with:
        path: kotadb-mcp-package/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('kotadb-mcp-package/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install MCP package dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: |
        # Remove postinstall script temporarily for CI
        npm pkg delete scripts.postinstall 2>/dev/null || true
        npm ci
    
    - name: Build MCP package
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run build
      continue-on-error: true
    
    - name: Run MCP unit tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:unit
      continue-on-error: true
    
    - name: Run MCP integration tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:integration
      env:
        KOTADB_BINARY_PATH: ../target/release/kotadb
      continue-on-error: true
    
    - name: Generate MCP coverage report
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:coverage
      continue-on-error: true

  # Code coverage - runs in parallel, not dependent on other tests
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # Don't fail the build on coverage issues
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "coverage"
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: |
        # Clean any previous coverage data
        cargo llvm-cov clean --workspace
        # Generate coverage with explicit settings
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && success()
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
