name: CI

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Optimize for CI performance
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # Let cargo use all available cores automatically

jobs:
  # Quick format check - fails fast
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Clippy check - runs in parallel with format
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-build"  # Share with build job
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Quick build check - just verify it compiles
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Quick build check
      run: cargo check --all-features
  
  # Unit tests - run in parallel
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run unit tests
      run: cargo test --lib --all-features
      env:
        RUST_LOG: error
        CI: true
    
    - name: Run doc tests
      run: cargo test --doc --all-features

  # Security audit - can run in parallel
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-v2
    
    - name: Install cargo-audit
      run: |
        if [ ! -f ~/.cargo/bin/cargo-audit ]; then
          cargo install cargo-audit --locked
        fi
    
    - name: Security audit
      run: cargo audit
      continue-on-error: true  # Don't fail on advisories

  # Storage tests
  integration-storage:
    name: Integration Tests (Storage)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run storage tests
      run: cargo test --test 'file_storage*' --test 'storage_index*' --test 'data_integrity*'
      env:
        RUST_LOG: error
        CI: true

  # Builder and validation tests
  integration-builders:
    name: Integration Tests (Builders)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run builder tests
      run: cargo test --test 'builder*' --test 'document_builder*' --test 'validated_types*' --test 'unicode_handling*'
      env:
        RUST_LOG: error
        CI: true

  # Primary index tests
  integration-primary-index:
    name: Integration Tests (Primary Index)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run primary index tests
      run: cargo test --test 'primary_index*'
      env:
        RUST_LOG: error
        CI: true

  # BTree tests
  integration-btree:
    name: Integration Tests (BTree)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run btree tests
      run: cargo test --test 'btree*' --test 'test_btree*'
      env:
        RUST_LOG: error
        CI: true

  # Query and bulk operation tests  
  integration-query:
    name: Integration Tests (Query)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run query tests
      run: cargo test --test 'query_routing*' --test 'bulk_operations*' --test 'llm_search*'
      env:
        RUST_LOG: error
        CI: true

  # Concurrent tests
  integration-concurrent:
    name: Integration Tests (Concurrent)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run concurrent tests
      run: cargo test --test 'concurrent*'
      env:
        RUST_LOG: error
        CI: true

  # Stress tests
  integration-stress:
    name: Integration Tests (Stress)
    runs-on: ubuntu-latest
    timeout-minutes: 4
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run stress tests
      run: cargo test --test 'index_stress*' --test 'query_routing_stress*'
      env:
        RUST_LOG: error
        CI: true

  # Chaos and adversarial tests
  integration-chaos:
    name: Integration Tests (Chaos)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run chaos tests
      run: cargo test --test 'chaos*' --test 'adversarial*'
      env:
        RUST_LOG: error
        CI: true

  # Performance and complexity tests
  integration-performance:
    name: Integration Tests (Performance)
    runs-on: ubuntu-latest
    timeout-minutes: 4
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run performance tests
      run: cargo test --test 'performance_regression*' --test 'complexity_comparison*' --test 'btree_performance*'
      env:
        RUST_LOG: error
        CI: true

  # CLI and system tests
  integration-cli:
    name: Integration Tests (CLI)
    runs-on: ubuntu-latest
    timeout-minutes: 4
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Build release binary for CLI tests
      run: cargo build --release --bin kotadb
    
    - name: Run CLI tests
      run: cargo test --test 'cli_path*'
      env:
        RUST_LOG: error
        CI: true

  # HTTP and observability tests
  integration-http:
    name: Integration Tests (HTTP)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run HTTP tests
      run: cargo test --test 'http_server*' --test 'observability*'
      env:
        RUST_LOG: error
        CI: true

  # System resilience and production tests
  integration-system:
    name: Integration Tests (System)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run system tests
      run: cargo test --test 'production_configuration*' --test 'system_resilience*' --test 'security_path*'
      env:
        RUST_LOG: error
        CI: true

  # Code analysis and relationship tests
  integration-analysis:
    name: Integration Tests (Analysis)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Run analysis tests
      run: cargo test --test 'code_analysis*' --test 'relationship_query*'
      env:
        RUST_LOG: error
        CI: true

  # Integration tests summary - required by branch protection
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [integration-storage, integration-builders, integration-primary-index, integration-btree, integration-query, integration-concurrent, integration-stress, integration-chaos, integration-performance, integration-cli, integration-http, integration-system, integration-analysis]
    if: always()
    timeout-minutes: 1
    steps:
    - name: Check integration test results
      run: |
        if [[ "${{ needs.integration-storage.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-builders.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-primary-index.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-btree.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-query.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-concurrent.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-stress.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-chaos.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-performance.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-cli.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-http.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-system.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-analysis.result }}" == "failure" ]]; then
          echo "One or more integration test suites failed"
          exit 1
        fi
        echo "All integration test suites passed successfully!"

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Needs more time for release build
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Build and test performance
      run: |
        cargo build --release --bin kotadb
        # Quick performance smoke test - just verify the binary works
        ./target/release/kotadb --version
        ./target/release/kotadb insert test/doc.md "Test Document" "Test content"
        ./target/release/kotadb get test/doc.md
        ./target/release/kotadb list
        ./target/release/kotadb stats
        echo "✅ Basic operations working"
      env:
        CI: true

  # Container build - can run in parallel
  container:
    name: Container Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container (Alpine-compatible without ONNX)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: kotadb:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build - can run in parallel
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "docs"
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  # MCP Package Integration Tests
  mcp-integration:
    name: MCP Package Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache"
    
    - name: Build KotaDB binary
      run: cargo build --release --bin kotadb
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check if MCP package exists
      id: check_mcp
      run: |
        if [ -d "kotadb-mcp-package" ] && [ -f "kotadb-mcp-package/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Cache npm dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      uses: actions/cache@v4
      with:
        path: kotadb-mcp-package/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('kotadb-mcp-package/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install MCP package dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: |
        # Remove postinstall script temporarily for CI
        npm pkg delete scripts.postinstall 2>/dev/null || true
        npm ci
    
    - name: Build MCP package
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run build
    
    - name: Run MCP unit tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:unit
    
    - name: Run MCP integration tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:integration
      env:
        KOTADB_BINARY_PATH: ../target/release/kotadb
    
    - name: Generate MCP coverage report
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run test:coverage
      continue-on-error: true

  # Code coverage - runs in parallel, not dependent on other tests
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "coverage"
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: |
        # Clean any previous coverage data
        cargo llvm-cov clean --workspace
        # Generate coverage with explicit settings
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && success()
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true