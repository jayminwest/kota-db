name: CI

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Optimize for CI performance
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # Increase parallelism
  RUST_TEST_THREADS: 4
  CARGO_BUILD_JOBS: 4

jobs:
  # Quick format check - stays on GitHub (very fast)
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # Clippy check - stays on GitHub (lightweight)
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "clippy-cache"
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Security audit - stays on GitHub (lightweight)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-v2
    
    - name: Install cargo-audit
      run: |
        if [ ! -f ~/.cargo/bin/cargo-audit ]; then
          cargo install cargo-audit --locked
        fi
    
    - name: Security audit
      run: cargo audit
      continue-on-error: true  # Don't fail on advisories

  # Main build and test - runs on Mac Pro for speed
  build-and-test:
    name: Build & Test (Mac Pro M2 Ultra)
    runs-on: [self-hosted, macOS, ARM64, m2-ultra]
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust environment
      run: |
        # Ensure we're using stable Rust
        rustup default stable
        rustup update
        rustc --version
        cargo --version
        # Clear any sccache configuration that might be set
        unset RUSTC_WRAPPER
        unset SCCACHE_CACHE_SIZE
    
    - name: Build project
      run: |
        cargo build --all-features
        cargo build --release --bin kotadb
      env:
        RUSTC_WRAPPER: ""  # Explicitly clear sccache
    
    - name: Run unit tests
      run: |
        cargo test --lib --all-features
        cargo test --doc --all-features
      env:
        RUST_LOG: error
        CI: true

  # Integration tests - split across Mac Pro's cores
  integration-tests:
    name: Integration Tests (Mac Pro M2 Ultra)
    runs-on: [self-hosted, macOS, ARM64, m2-ultra]
    needs: [format, clippy]
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        suite:
          - core
          - index
          - query
          - stress
          - performance
          - system
          - analysis
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        # Clear any sccache configuration
        unset RUSTC_WRAPPER
        unset SCCACHE_CACHE_SIZE
    
    - name: Run ${{ matrix.suite }} tests
      run: |
        case "${{ matrix.suite }}" in
          core)
            cargo test --test file_storage_integration_test --test storage_index_integration_test --test data_integrity_test
            cargo test --test builder_tests --test document_builder_id_test --test validated_types_tests --test unicode_handling_test
            ;;
          index)
            cargo test --test primary_index_tests --test primary_index_edge_cases_test --test primary_index_persistence_test
            cargo test --test btree_algorithms_test --test btree_performance_test --test test_btree_deletion
            ;;
          query)
            cargo test --test query_routing_stress --test bulk_operations_test --test llm_search_test --test wildcard_search_test
            cargo test --test trigram_content_search_test --test test_trigram_false_positives_221 --test test_trigram_result_differentiation_198
            cargo test --test test_search_consistency_issue_222 --test test_natural_language_query --test test_query_sanitization
            ;;
          stress)
            cargo test --test concurrent_access_test --test concurrent_stress_test --test concurrent_stress_simple_test
            cargo test --test index_stress_test --test query_routing_stress
            cargo test --test chaos_tests --test adversarial_tests
            ;;
          performance)
            cargo test --test performance_regression_test --test complexity_comparison_test --test write_performance_test
            ;;
          system)
            cargo test --test cli_path_operations
            cargo test --test http_server_integration_test --test observability_integration_test
            cargo test --test production_configuration_test --test system_resilience_test --test security_path_traversal_test
            ;;
          analysis)
            cargo test --test code_analysis_integration_test --test relationship_query_pipeline_test
            cargo test --test test_symbol_index --test test_symbol_debug
            ;;
        esac
      env:
        RUST_LOG: error
        CI: true
        RUST_TEST_THREADS: 8  # Use more threads on Mac Pro
        RUSTC_WRAPPER: ""  # Explicitly disable sccache

  # Performance validation
  performance:
    name: Performance Validation (Mac Pro M2 Ultra)
    runs-on: [self-hosted, macOS, ARM64, m2-ultra]
    needs: build-and-test
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Build release binary
      run: cargo build --release --bin kotadb
    
    - name: Test release binary performance
      run: |
        ./target/release/kotadb --version
        ./target/release/kotadb insert test/doc.md "Test Document" "Test content"
        ./target/release/kotadb get test/doc.md
        ./target/release/kotadb list
        ./target/release/kotadb stats
        echo "✅ Performance validation complete"

  # Container build - stays on GitHub (needs Docker)
  container:
    name: Container Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container (Alpine-compatible without ONNX)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: kotadb:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build - stays on GitHub
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "docs"
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  # MCP Package Tests - can run on Mac Pro for Node.js performance
  mcp-integration:
    name: MCP Package Integration Tests
    runs-on: [self-hosted, macOS, ARM64, m2-ultra]
    needs: build-and-test
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Check if MCP package exists
      id: check_mcp
      run: |
        if [ -d "kotadb-mcp-package" ] && [ -f "kotadb-mcp-package/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Install MCP package dependencies
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: |
        npm pkg delete scripts.postinstall 2>/dev/null || true
        npm ci
    
    - name: Build MCP package
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: npm run build
    
    - name: Run MCP tests
      if: steps.check_mcp.outputs.exists == 'true'
      working-directory: kotadb-mcp-package
      run: |
        npm run test:unit
        npm run test:integration
      env:
        KOTADB_BINARY_PATH: ../target/release/kotadb

  # Code coverage - optional, runs on GitHub to avoid slowing down Mac
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "coverage"
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: |
        cargo llvm-cov clean --workspace
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && success()
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  # Final CI status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests, security]
    if: always()
    timeout-minutes: 1
    steps:
    - name: Check CI results
      run: |
        if [[ "${{ needs.build-and-test.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.security.result }}" == "failure" ]]; then
          echo "❌ CI failed"
          exit 1
        fi
        echo "✅ All CI checks passed!"

  # Fallback job if Mac Pro is offline
  fallback-build:
    name: Fallback Build (GitHub)
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests]
    if: failure() && (needs.build-and-test.result == 'skipped' || needs.integration-tests.result == 'skipped')
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "fallback-build"
    
    - name: Run minimal CI
      run: |
        echo "⚠️ Mac Pro offline - running fallback CI on GitHub"
        cargo build --all-features
        cargo test --lib --all-features
        echo "✅ Fallback CI complete (limited testing)"