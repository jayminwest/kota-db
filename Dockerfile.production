# Production Dockerfile for KotaDB SaaS API
# Multi-stage build for optimized image size and security

# Build stage - using latest Rust with static linking for GLIBC compatibility
FROM rust:latest AS builder

# Install build dependencies including C++ compiler for esaxx-rs
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy dependency files first for better caching
COPY Cargo.toml Cargo.lock ./

# Copy benches for dependency resolution
COPY benches ./benches

# Create dummy source files to build dependencies
RUN mkdir -p src/bin && \
    echo "fn main() {}" > src/main.rs && \
    echo "pub mod api_keys; pub mod http_server; pub mod file_storage; pub use api_keys::{ApiKeyConfig, ApiKeyService}; pub use http_server::start_saas_server; pub use file_storage::{create_file_storage, FileStorage};" > src/lib.rs && \
    echo "fn main() {}" > src/bin/kotadb-api-server.rs && \
    mkdir -p src && echo "pub struct ApiKeyConfig; pub struct ApiKeyService;" > src/api_keys.rs && \
    echo "pub fn start_saas_server() {}" > src/http_server.rs && \
    echo "pub fn create_file_storage() {} pub struct FileStorage;" > src/file_storage.rs

# Build dependencies only (skip binary creation)
RUN cargo build --release --lib --features tree-sitter-parsing,git-integration

# Remove the stub source files but keep dependencies
RUN rm -rf src

# Copy actual source code
COPY src ./src
# Note: build.rs not needed for this project

# Build the actual application (ensure it completes successfully)
RUN echo "Building kotadb-api-server with full source code..." && \
    cargo build --release --features tree-sitter-parsing,git-integration --bin kotadb-api-server && \
    echo "Binary size: $(ls -lh target/release/kotadb-api-server)" && \
    test -f target/release/kotadb-api-server || (echo "ERROR: Binary not built!" && exit 1) && \
    echo "Binary dependencies:" && \
    ldd target/release/kotadb-api-server | head -10

# Runtime stage - use same base as build stage to avoid GLIBC conflicts
FROM debian:trixie-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    git \
    curl \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN useradd -m -u 1001 -s /bin/bash kotadb

# Create data directory
RUN mkdir -p /data && chown kotadb:kotadb /data

# Copy binary from builder
COPY --from=builder /app/target/release/kotadb-api-server /usr/local/bin/kotadb-api-server

# Copy entrypoint script (must be done as root before USER change)
COPY --chmod=755 scripts/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

# Switch to non-root user
USER kotadb

# Set working directory
WORKDIR /data

# Environment variables
ENV RUST_LOG=info,kotadb=debug \
    KOTADB_DATA_DIR=/data \
    PORT=8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE 8080

# Use entrypoint script for better error handling
CMD ["docker-entrypoint.sh"]